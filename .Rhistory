surv_obj <- Surv(time = valid_data[[time_col]], event = valid_data[[status_col]])
fit <- survfit(surv_obj ~ mutation_status, data = valid_data)
# Statistical test
surv_diff <- survdiff(surv_obj ~ mutation_status, data = valid_data)
p_value <- 1 - pchisq(surv_diff$chisq, length(surv_diff$n) - 1)
# Print results
cat("\n=== Survival Curves ===\n")
print(fit)
cat("\n=== Log-rank Test ===\n")
cat("Chi-square:", round(surv_diff$chisq, 4), "\n")
cat("P-value:", round(p_value, 4), "\n")
# Create survival plot
p <- ggsurvplot(
fit,
data = valid_data,
pval = TRUE,
pval.method = TRUE,
conf.int = TRUE,
risk.table = TRUE,
risk.table.height = 0.3,
xlab = "Time (days)",
ylab = "Overall Survival Probability",
title = paste0(gene, " Mutation vs Overall Survival (TCGA-LAML)"),
legend.title = "Group",
legend.labs = c(paste0(gene, " Mutant"), paste0(gene, " WT")),
palette = c("#E31A1C", "#1F78B4"),  # Red for mutant, blue for WT
ggtheme = theme_minimal()
)
return(list(
fit = fit,
test = surv_diff,
p_value = p_value,
plot = p,
data = valid_data
))
}
# Run analysis for RUNX1
runx1_results <- perform_gene_survival(tcga_laml, "RUNX1", "CDR_OS.time", "CDR_OS")
# Prepare clinical data
clinical <- maf_obj@clinical.data
clinical$mutation_status <- ifelse(clinical$Tumor_Sample_Barcode %in% mutated_samples,
paste0(gene, " Mutant"),
paste0(gene, " WT"))
# Function to perform complete survival analysis
perform_gene_survival <- function(maf_obj, gene, time_col = "CDR_OS.time", status_col = "CDR_OS") {
# Get mutated samples
mutated_samples <- unique(maf_obj@data[Hugo_Symbol == gene]$Tumor_Sample_Barcode)
# Prepare clinical data
clinical <- maf_obj@clinical.data
clinical$mutation_status <- ifelse(clinical$Tumor_Sample_Barcode %in% mutated_samples,
paste0(gene, " Mutant"),
paste0(gene, " WT"))
# Filter valid data
valid_data <- clinical[!is.na(get(time_col)) &
!is.na(get(status_col)) &
get(time_col) > 0]
# Summary
cat("=== Survival Analysis Summary ===\n")
cat("Gene:", gene, "\n")
cat("Total mutated samples:", length(mutated_samples), "\n")
cat("Valid data for analysis:\n")
print(table(valid_data$mutation_status))
# Check if both groups exist
if(length(unique(valid_data$mutation_status)) < 2) {
cat("Error: Only one group has valid data\n")
return(NULL)
}
# Survival analysis
surv_obj <- Surv(time = valid_data[[time_col]], event = valid_data[[status_col]])
fit <- survfit(surv_obj ~ mutation_status, data = valid_data)
# Statistical test
surv_diff <- survdiff(surv_obj ~ mutation_status, data = valid_data)
p_value <- 1 - pchisq(surv_diff$chisq, length(surv_diff$n) - 1)
# Print results
cat("\n=== Survival Curves ===\n")
print(fit)
cat("\n=== Log-rank Test ===\n")
cat("Chi-square:", round(surv_diff$chisq, 4), "\n")
cat("P-value:", round(p_value, 4), "\n")
# Create survival plot
p <- ggsurvplot(
fit,
data = valid_data,
pval = TRUE,
pval.method = TRUE,
conf.int = TRUE,
risk.table = TRUE,
risk.table.height = 0.3,
xlab = "Time (days)",
ylab = "Overall Survival Probability",
title = paste0(gene, " Mutation vs Overall Survival (TCGA-LAML)"),
legend.title = "Group",
legend.labs = c(paste0(gene, " Mutant"), paste0(gene, " WT")),
palette = c("#E31A1C", "#1F78B4"),  # Red for mutant, blue for WT
ggtheme = theme_minimal()
)
return(list(
fit = fit,
test = surv_diff,
p_value = p_value,
plot = p,
data = valid_data
))
}
# Run analysis for RUNX1
runx1_results <- perform_gene_survival(tcga_laml, "RUNX1", "CDR_OS.time", "CDR_OS")
library(ggsurvplot)
library(ggsurvplot)
install.packages("ggsurvplot")
library(ggsurvplot)
library(survminer)
install.packages("survminer")
# Complete working survival analysis for RUNX1 in TCGA-LAML
library(survival)
library(survminer)
library(ggplot2)
library(ggsurvplot)
# Function to perform complete survival analysis
perform_gene_survival <- function(maf_obj, gene, time_col = "CDR_OS.time", status_col = "CDR_OS") {
# Get mutated samples
mutated_samples <- unique(maf_obj@data[Hugo_Symbol == gene]$Tumor_Sample_Barcode)
# Prepare clinical data
clinical <- maf_obj@clinical.data
clinical$mutation_status <- ifelse(clinical$Tumor_Sample_Barcode %in% mutated_samples,
paste0(gene, " Mutant"),
paste0(gene, " WT"))
# Filter valid data
valid_data <- clinical[!is.na(get(time_col)) &
!is.na(get(status_col)) &
get(time_col) > 0]
# Summary
cat("=== Survival Analysis Summary ===\n")
cat("Gene:", gene, "\n")
cat("Total mutated samples:", length(mutated_samples), "\n")
cat("Valid data for analysis:\n")
print(table(valid_data$mutation_status))
# Check if both groups exist
if(length(unique(valid_data$mutation_status)) < 2) {
cat("Error: Only one group has valid data\n")
return(NULL)
}
# Survival analysis
surv_obj <- Surv(time = valid_data[[time_col]], event = valid_data[[status_col]])
fit <- survfit(surv_obj ~ mutation_status, data = valid_data)
# Statistical test
surv_diff <- survdiff(surv_obj ~ mutation_status, data = valid_data)
p_value <- 1 - pchisq(surv_diff$chisq, length(surv_diff$n) - 1)
# Print results
cat("\n=== Survival Curves ===\n")
print(fit)
cat("\n=== Log-rank Test ===\n")
cat("Chi-square:", round(surv_diff$chisq, 4), "\n")
cat("P-value:", round(p_value, 4), "\n")
# Create survival plot
p <- ggsurvplot(
fit,
data = valid_data,
pval = TRUE,
pval.method = TRUE,
conf.int = TRUE,
risk.table = TRUE,
risk.table.height = 0.3,
xlab = "Time (days)",
ylab = "Overall Survival Probability",
title = paste0(gene, " Mutation vs Overall Survival (TCGA-LAML)"),
legend.title = "Group",
legend.labs = c(paste0(gene, " Mutant"), paste0(gene, " WT")),
palette = c("#E31A1C", "#1F78B4"),  # Red for mutant, blue for WT
ggtheme = theme_minimal()
)
return(list(
fit = fit,
test = surv_diff,
p_value = p_value,
plot = p,
data = valid_data
))
}
# Run analysis for RUNX1
runx1_results <- perform_gene_survival(tcga_laml, "RUNX1", "CDR_OS.time", "CDR_OS")
# Display the plot
if(!is.null(runx1_results)) {
print(runx1_results$plot)
}
# Alternative: Use the columns that worked before
cat("\n=== Alternative Analysis (using days_to_last_followup) ===\n")
runx1_alt <- perform_gene_survival(tcga_laml, "RUNX1", "days_to_last_followup", "Overall_Survival_Status")
# Manual mafSurvival-style output
create_maf_style_output <- function(maf_obj, gene, time_col = "CDR_OS.time", status_col = "CDR_OS") {
# Get mutated samples
mutated_samples <- unique(maf_obj@data[Hugo_Symbol == gene]$Tumor_Sample_Barcode)
# Prepare data
clinical <- copy(maf_obj@clinical.data)
clinical$Group <- ifelse(clinical$Tumor_Sample_Barcode %in% mutated_samples, "Mutant", "WT")
# Filter valid data
valid_data <- clinical[!is.na(get(time_col)) & !is.na(get(status_col)) & get(time_col) > 0]
# Remove samples with NA group assignments
valid_data <- valid_data[!is.na(Group)]
cat("Number of mutated samples for given genes:\n")
cat(gene, "    ", length(mutated_samples), "\n\n")
# Count removed samples
total_samples <- nrow(maf_obj@clinical.data)
valid_samples <- nrow(valid_data)
removed_samples <- total_samples - valid_samples
if(removed_samples > 0) {
cat("Removed", removed_samples, "samples with NA's\n")
}
# Calculate median survival
surv_obj <- Surv(time = valid_data[[time_col]], event = valid_data[[status_col]])
fit <- survfit(surv_obj ~ Group, data = valid_data)
# Extract median times
summary_fit <- summary(fit)
medians <- summary_fit$table[, "median"]
cat("Median survival..\n")
survival_summary <- data.frame(
Group = names(medians),
medianTime = as.numeric(medians),
N = summary_fit$table[, "records"]
)
print(survival_summary)
return(list(fit = fit, data = valid_data, summary = survival_summary))
}
# Create mafSurvival-style output
cat("\n=== mafSurvival-style Output ===\n")
maf_style_result <- create_maf_style_output(tcga_laml, "RUNX1", "CDR_OS.time", "CDR_OS")
# Run analysis for RUNX1
runx1_results <- perform_gene_survival(tcga_laml, "RUNX1", "CDR_OS.time", "CDR_OS")
# Display the plot
if(!is.null(runx1_results)) {
print(runx1_results$plot)
}
# Alternative: Use the columns that worked before
cat("\n=== Alternative Analysis (using days_to_last_followup) ===\n")
runx1_alt <- perform_gene_survival(tcga_laml, "RUNX1", "days_to_last_followup", "Overall_Survival_Status")
# Function to compare multiple genes
compare_genes_survival <- function(maf_obj, genes, time_col = "CDR_OS.time", status_col = "CDR_OS") {
results <- list()
for(gene in genes) {
cat("\n", "="*50, "\n")
cat("Analyzing:", gene, "\n")
cat("="*50, "\n")
result <- perform_gene_survival(maf_obj, gene, time_col, status_col)
if(!is.null(result)) {
results[[gene]] <- result
}
}
return(results)
}
# Manual mafSurvival-style output
create_maf_style_output <- function(maf_obj, gene, time_col = "CDR_OS.time", status_col = "CDR_OS") {
# Get mutated samples
mutated_samples <- unique(maf_obj@data[Hugo_Symbol == gene]$Tumor_Sample_Barcode)
# Prepare data
clinical <- copy(maf_obj@clinical.data)
clinical$Group <- ifelse(clinical$Tumor_Sample_Barcode %in% mutated_samples, "Mutant", "WT")
# Filter valid data
valid_data <- clinical[!is.na(get(time_col)) & !is.na(get(status_col)) & get(time_col) > 0]
# Remove samples with NA group assignments
valid_data <- valid_data[!is.na(Group)]
cat("Number of mutated samples for given genes:\n")
cat(gene, "    ", length(mutated_samples), "\n\n")
# Count removed samples
total_samples <- nrow(maf_obj@clinical.data)
valid_samples <- nrow(valid_data)
removed_samples <- total_samples - valid_samples
if(removed_samples > 0) {
cat("Removed", removed_samples, "samples with NA's\n")
}
# Calculate median survival
surv_obj <- Surv(time = valid_data[[time_col]], event = valid_data[[status_col]])
fit <- survfit(surv_obj ~ Group, data = valid_data)
# Extract median times
summary_fit <- summary(fit)
medians <- summary_fit$table[, "median"]
cat("Median survival..\n")
survival_summary <- data.frame(
Group = names(medians),
medianTime = as.numeric(medians),
N = summary_fit$table[, "records"]
)
print(survival_summary)
return(list(fit = fit, data = valid_data, summary = survival_summary))
}
# Create mafSurvival-style output
cat("\n=== mafSurvival-style Output ===\n")
maf_style_result <- create_maf_style_output(tcga_laml, "RUNX1", "CDR_OS.time", "CDR_OS")
runApp()
runApp()
runApp()
observeEvent(input$run_survival_geneset, {
req(values$current_maf)
tryCatch({
results <- maftools::survGroup(
maf = values$current_maf,
top = input$survival_top_genes,
geneSetSize = input$geneset_size,
time = input$time_col,
Status = input$status_col,
verbose = FALSE
)
# Print results to console for debugging
print("survGroup results:")
print(results)
print("Column names:")
print(colnames(results))
values$survival_geneset_results <- results
values$survival_geneset_run <- TRUE
}, error = function(e) {
print(paste("Error:", e$message))
values$survival_geneset_run <- FALSE
})
})
runApp()
prog_geneset = survGroup(maf = laml, top = 20, geneSetSize = 2, time = "days_to_last_followup", Status = "Overall_Survival_Status", verbose = FALSE)
print(prog_geneset)
prog_geneset = survGroup(maf = tcga_laml, top = 20, geneSetSize = 2, time = "days_to_last_followup", Status = "Overall_Survival_Status", verbose = FALSE)
prog_geneset = survGroup(maf = tcga_laml, top = 20, geneSetSize = 2, time = "CDR_OS.time", Status = "CDR_OS", verbose = FALSE)
?(survGroup)
?survGroup
prog_geneset = survGroup(maf = tcga_laml, top = 20, geneSetSize = 2, time = "CDR_OS.time", Status = "CDR_OS", verbose = FALSE)
packageVersion("maftools")
runApp()
runApp('~/Oncology/Oncology_webserver/webserver_Rshiny/oncoriskpro_server_page')
runApp()
runApp()
runApp()
runApp()
runApp('~/Oncology/Oncology_webserver/webserver_Rshiny/oncoriskpro_server_page')
runApp()
runApp('~/Oncology/Oncology_webserver/webserver_Rshiny/oncoriskpro_server_page')
runApp()
runApp('~/Oncology/Oncology_webserver/webserver_Rshiny/oncoriskpro_server_page')
runApp('~/Oncology/Oncology_webserver/webserver_Rshiny/server_oncokb/server-oncokb.R')
runApp('~/Oncology/Oncology_webserver/webserver_Rshiny/oncoriskpro_server_page')
runApp()
runApp('~/Oncology/Oncology_webserver/webserver_Rshiny/oncoriskpro_server_page')
runApp()
fab.ce = clinicalEnrichment(maf = laml, clinicalFeature = 'FAB_classification')
fab.ce = clinicalEnrichment(maf = tcga_laml, clinicalFeature = 'FAB_classification')
colnames(tcga_laml)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library("mclust")
install.packages("mclust")
library("mclust")
library(mclust)
runApp()
runApp()
runApp()
runApp()
maftools::getSampleSummary(tcga_laml)$Tumor_Sample_Barcod
maftools::getSampleSummary(tcga_laml)$Tumor_Sample_Barcod
maftools::getSampleSummary(tcga_laml)$Tumor_Sample_Barcode
runApp()
runApp()
runApp()
runApp()
runApp('~/test')
runApp('~/test')
runApp('~/test')
runApp('~/test')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
tcga.ab.2972.het = inferHeterogeneity(maf = laml, tsb = 'TCGA-AB-2972', vafCol = 'i_TumorVAF_WU')
plotClusters(clusters = tcga.ab.2972.het)
runApp()
runApp()
tcga.ab.2972.het = inferHeterogeneity(maf = tcga_laml, tsb = 'TCGA-AB-2972', vafCol = 'i_TumorVAF_WU')
tcga_laml
tcga_laml@data$Tumor_Sample_Barcode_min
tcga.ab.2972.het = inferHeterogeneity(maf = tcga_laml, tsb = 'TCGA-AB-2808', vafCol = 'i_TumorVAF_WU')
tcga_laml@variants.per.sample$Tumor_Sample_Barcode
tcga.ab.2972.het = inferHeterogeneity(maf = tcga_laml, tsb = 'TCGA-AB-2893-03A-01W-0733-08', vafCol = 'i_TumorVAF_WU')
tcga.ab.2972.het = inferHeterogeneity(maf = tcga_laml, tsb = 'TCGA-AB-2893-03A-01W-0733-08', vafCol = 't_vaf')
summary(tcga_laml)
colnames(tcga_laml)
colnames(tcga_laml@data)
vaf_columns <- colnames(tcga_laml@data)[grepl("vaf|VAF|freq|alt", colnames(tcga_laml@data), ignore.case = TRUE)]
print("VAF-related columns:")
print(vaf_columns)
laml
laml@data
colnames(tcga_laml@data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
## Prepare your own data
library(maftools)
laml.maf <- system.file("extdata", "tcga_laml.maf.gz", package = "maftools")
laml <- read.maf(maf = laml.maf)
laml.tnm <- trinucleotideMatrix(maf = laml, ref_genome = 'BSgenome.Hsapiens.UCSC.hg19',
prefix = 'chr', add = TRUE, useSyn = TRUE)
library("BSgenome.Hsapiens.UCSC.hg19", quietly = TRUE)
install.packages("BSgenome.Hsapiens.UCSC.hg19")
library("BSgenome.Hsapiens.UCSC.hg19", quietly = TRUE)
install.packages("BSgenome.Hsapiens.UCSC.hg19")
install.packages(BSgenome.Hsapiens.UCSC.hg19)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Oncology/Oncology_webserver/webserver_Rshiny/server_oncokb/server-oncokb.R')
runApp()
wget https://gdac.broadinstitute.org/runs/analyses__2016_01_28/reports/cancer/ACC-TP/MutSigNozzleReport2CV/ACC-TP.final_analysis_set.maf
View(laml_clinical)
runApp()
runApp('~/Oncology/Oncology_webserver/webserver_Rshiny/server_oncokb/server-oncokb.R')
runApp('~/Oncology/Oncology_webserver/webserver_Rshiny/server_oncokb/server-oncokb.R')
runApp('~/Oncology/Oncology_webserver/webserver_Rshiny/server_oncokb/server-oncokb.R')
runApp('~/Oncology/Oncology_webserver/webserver_Rshiny/server_oncokb/server-oncokb.R')
runApp('~/Oncology/Oncology_webserver/webserver_Rshiny/server_oncokb/server-oncokb.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
a <- tcgaLoad(study = "ACC")
View(a)
plotmafSummary(maf = a, rmOutlier = TRUE, addStat = 'median', dashboard = TRUE, titvRaw = FALSE)
runApp()
runApp('~/a')
ui <- fluidPage(
fileInput("file1", "Choose CSV File",
accept = c("text/csv",
"text/comma-separated-values,
.csv"))
)
server <- function(input, output) {
data <- reactive({
infile <- input$file1
if (is.null(infile)) {
return(NULL)
}
read.csv(infile$datapath, header = TRUE)
})
}
runApp('~/atest')
runApp()
runApp()
runApp()
runApp()
runApp()
# 用你的文件路径
akaka <- maftools::read.maf("/Users/xiyas/ACC-TP.final_analysis_set.maf")
akaka
View(akaka)
runApp()
runApp()
akaka
akaka@data
akaka@variants.per.sample
runApp('~/Oncology/Oncology_webserver/webserver_Rshiny/server_oncokb/server-oncokb.R')
plotmafSummary(maf = akaka, rmOutlier = TRUE, addStat = 'median', dashboard = TRUE, titvRaw = FALSE)
runApp()
runApp()
plotmafSummary(maf = akaka, rmOutlier = TRUE, addStat = 'median', dashboard = TRUE, titvRaw = FALSE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
colnames(akaka)
akaka
akaka@data
colnames(akaka@data)
runApp()
runApp()
runApp()
runApp()
runApp()
getwd()
save.image()
q()
